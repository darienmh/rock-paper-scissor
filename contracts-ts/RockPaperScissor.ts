/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RockPaperScissorInterface extends utils.Interface {
  functions: {
    "GAME_TIME()": FunctionFragment;
    "MIN_BET()": FunctionFragment;
    "game()": FunctionFragment;
    "getResult(uint8,uint8)": FunctionFragment;
    "createHandEncrypt(string,uint8,address)": FunctionFragment;
    "createRoom(address,uint256,bytes32)": FunctionFragment;
    "enterGame(bytes32,bytes32)": FunctionFragment;
    "reveal(bytes32,string,uint8)": FunctionFragment;
    "getBalance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GAME_TIME"
      | "MIN_BET"
      | "game"
      | "getResult"
      | "createHandEncrypt"
      | "createRoom"
      | "enterGame"
      | "reveal"
      | "getBalance"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "GAME_TIME", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_BET", values?: undefined): string;
  encodeFunctionData(functionFragment: "game", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getResult",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createHandEncrypt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createRoom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "enterGame",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "GAME_TIME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_BET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "game", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createHandEncrypt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createRoom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enterGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;

  events: {
    "EnterRoom(bytes32,address,bool)": EventFragment;
    "RevealHand(bytes32,address,bool)": EventFragment;
    "RoomCreated(bytes32,uint256,address,bool,address)": EventFragment;
    "Winners(bytes32,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EnterRoom"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevealHand"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoomCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Winners"): EventFragment;
}

export interface EnterRoomEventObject {
  room: string;
  player: string;
  is_open: boolean;
}
export type EnterRoomEvent = TypedEvent<
  [string, string, boolean],
  EnterRoomEventObject
>;

export type EnterRoomEventFilter = TypedEventFilter<EnterRoomEvent>;

export interface RevealHandEventObject {
  room: string;
  player: string;
  is_open: boolean;
}
export type RevealHandEvent = TypedEvent<
  [string, string, boolean],
  RevealHandEventObject
>;

export type RevealHandEventFilter = TypedEventFilter<RevealHandEvent>;

export interface RoomCreatedEventObject {
  room: string;
  bet: BigNumber;
  player1: string;
  is_open: boolean;
  token: string;
}
export type RoomCreatedEvent = TypedEvent<
  [string, BigNumber, string, boolean, string],
  RoomCreatedEventObject
>;

export type RoomCreatedEventFilter = TypedEventFilter<RoomCreatedEvent>;

export interface WinnersEventObject {
  room: string;
  winner: string;
  token: string;
  prize: BigNumber;
}
export type WinnersEvent = TypedEvent<
  [string, string, string, BigNumber],
  WinnersEventObject
>;

export type WinnersEventFilter = TypedEventFilter<WinnersEvent>;

export interface RockPaperScissor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RockPaperScissorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GAME_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_BET(overrides?: CallOverrides): Promise<[BigNumber]>;

    game(overrides?: CallOverrides): Promise<[string]>;

    getResult(
      _move1: PromiseOrValue<BigNumberish>,
      _move2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number] & { player1: number }>;

    createHandEncrypt(
      _salt: PromiseOrValue<string>,
      _move: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { handEncrypt: string }>;

    createRoom(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _handEncrypt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterGame(
      _room: PromiseOrValue<BytesLike>,
      _handEncrypt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reveal(
      _room: PromiseOrValue<BytesLike>,
      _salt: PromiseOrValue<string>,
      _move: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  GAME_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BET(overrides?: CallOverrides): Promise<BigNumber>;

  game(overrides?: CallOverrides): Promise<string>;

  getResult(
    _move1: PromiseOrValue<BigNumberish>,
    _move2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  createHandEncrypt(
    _salt: PromiseOrValue<string>,
    _move: PromiseOrValue<BigNumberish>,
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  createRoom(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _handEncrypt: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterGame(
    _room: PromiseOrValue<BytesLike>,
    _handEncrypt: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reveal(
    _room: PromiseOrValue<BytesLike>,
    _salt: PromiseOrValue<string>,
    _move: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    GAME_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BET(overrides?: CallOverrides): Promise<BigNumber>;

    game(overrides?: CallOverrides): Promise<string>;

    getResult(
      _move1: PromiseOrValue<BigNumberish>,
      _move2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    createHandEncrypt(
      _salt: PromiseOrValue<string>,
      _move: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    createRoom(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _handEncrypt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    enterGame(
      _room: PromiseOrValue<BytesLike>,
      _handEncrypt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    reveal(
      _room: PromiseOrValue<BytesLike>,
      _salt: PromiseOrValue<string>,
      _move: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "EnterRoom(bytes32,address,bool)"(
      room?: null,
      player?: null,
      is_open?: null
    ): EnterRoomEventFilter;
    EnterRoom(room?: null, player?: null, is_open?: null): EnterRoomEventFilter;

    "RevealHand(bytes32,address,bool)"(
      room?: null,
      player?: null,
      is_open?: null
    ): RevealHandEventFilter;
    RevealHand(
      room?: null,
      player?: null,
      is_open?: null
    ): RevealHandEventFilter;

    "RoomCreated(bytes32,uint256,address,bool,address)"(
      room?: null,
      bet?: null,
      player1?: null,
      is_open?: null,
      token?: null
    ): RoomCreatedEventFilter;
    RoomCreated(
      room?: null,
      bet?: null,
      player1?: null,
      is_open?: null,
      token?: null
    ): RoomCreatedEventFilter;

    "Winners(bytes32,address,address,uint256)"(
      room?: null,
      winner?: null,
      token?: null,
      prize?: null
    ): WinnersEventFilter;
    Winners(
      room?: null,
      winner?: null,
      token?: null,
      prize?: null
    ): WinnersEventFilter;
  };

  estimateGas: {
    GAME_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BET(overrides?: CallOverrides): Promise<BigNumber>;

    game(overrides?: CallOverrides): Promise<BigNumber>;

    getResult(
      _move1: PromiseOrValue<BigNumberish>,
      _move2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createHandEncrypt(
      _salt: PromiseOrValue<string>,
      _move: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createRoom(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _handEncrypt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterGame(
      _room: PromiseOrValue<BytesLike>,
      _handEncrypt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reveal(
      _room: PromiseOrValue<BytesLike>,
      _salt: PromiseOrValue<string>,
      _move: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GAME_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_BET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    game(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getResult(
      _move1: PromiseOrValue<BigNumberish>,
      _move2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createHandEncrypt(
      _salt: PromiseOrValue<string>,
      _move: PromiseOrValue<BigNumberish>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createRoom(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _handEncrypt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterGame(
      _room: PromiseOrValue<BytesLike>,
      _handEncrypt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reveal(
      _room: PromiseOrValue<BytesLike>,
      _salt: PromiseOrValue<string>,
      _move: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
